// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"gorm.io/gorm"
	"login_grpc/internal/config"
	"login_grpc/internal/repository"
	"login_grpc/internal/server/grpc"
	"login_grpc/internal/services"
)

// Injectors from di_container.go:

// User Dependencies Injection
func InitializeUserRepository(dao *gorm.DB) *repository.UserRepository {
	userRepositoryOpts := &repository.UserRepositoryOpts{
		Dao: dao,
	}
	userRepository := repository.NewUserRepository(userRepositoryOpts)
	return userRepository
}

func InitializeUserService(ur *repository.UserRepository) *services.UserService {
	userServiceOpts := &services.UserServiceOpts{
		UserRepo: ur,
	}
	userService := services.NewUserService(userServiceOpts)
	return userService
}

func InitializeUserServiceServer(us *services.UserService, as *services.AuthService) *grpc.UserServiceServer {
	userServerOpts := &grpc.UserServerOpts{
		UserService: us,
		AuthService: as,
	}
	userServiceServer := grpc.NewUserServiceServer(userServerOpts)
	return userServiceServer
}

// Auth Dependencies Injection
func InitializeAuthRepository(dao *gorm.DB) *repository.AuthRepository {
	authRepositoryOpts := repository.AuthRepositoryOpts{
		Dao: dao,
	}
	authRepository := repository.NewAuthRepository(authRepositoryOpts)
	return authRepository
}

func InitializeAuthService(ar *repository.AuthRepository, th *services.TokenHandler) *services.AuthService {
	authServiceOpts := &services.AuthServiceOpts{
		TokenHandler: th,
		AuthRepo:     ar,
	}
	authService := services.NewAuthService(authServiceOpts)
	return authService
}

func InitializeAuthServiceServer(as *services.AuthService, us *services.UserService, th *services.TokenHandler) *grpc.AuthServiceServer {
	authServerOptions := grpc.AuthServerOptions{
		AuthService:  as,
		UserService:  us,
		TokenHandler: th,
	}
	authServiceServer := grpc.NewAuthServiceServer(authServerOptions)
	return authServiceServer
}

// Token Dependencies Injection
func InitializeTokenHandler(secret *config.JwtConfig) *services.TokenHandler {
	tokenHandlerOpts := services.TokenHandlerOpts{
		JwtConfig: secret,
	}
	tokenHandler := services.NewTokenHandler(tokenHandlerOpts)
	return tokenHandler
}
